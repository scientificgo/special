// Copyright (c) 2018, Jack Parkinson. All rights reserved.
// Use of this source code is governed by the BSD 3-Clause
// license that can be found in the LICENSE file.

package special_test

import (
	"fmt"
	. "github.com/scientificgo/special"
	"github.com/scientificgo/utils"
	"math"
	"testing"
)

const (
	tol = 10
)

var (
	NaN     = math.NaN()
	Inf     = math.Inf(1)
	GlobalF float64
)

//
// Types and helper functions to standardise as much as possible across all test/benchmark functions.
//

type (
	testfunc  func(in []float64) []float64
	benchfunc func(in []float64) float64 // Could have chosen return type; chose most common.
	testcase  [][]float64
)

func testall(t *testing.T, tol float64, fname string, cases [][]testcase, tags []string, f testfunc) {
	if len(tags) != len(cases) {
		panic("test: tags and cases have unequal size")
	}
	for i, tag := range tags {
		test(t, tol, cases[i], tag, fname, f)
	}
}

func test(t *testing.T, tol float64, cases []testcase, tag, fname string, f testfunc) {
	t.Run(tag, func(t *testing.T) {
		for _, c := range cases {
			c0 := c[0]
			c1 := c[1]
			if out := f(c0); !utils.EqualFloat64s(out, c1, tol) {
				errmsg(t, 5, fname, c0, c1, out)
			}
		}
	})
}

func errmsg(t *testing.T, n int, fname string, c0, c1 []float64, out []float64) {
	var argstr string
	narg := int(math.Min(float64(n), float64(len(c0))))
	for i := 0; i < narg-1; i++ {
		argstr += fmt.Sprintf("%v,", c0[i])
	}
	if len(c0) > narg {
		argstr += fmt.Sprintf("%v,...", c0[narg-1])
	} else {
		argstr += fmt.Sprintf("%v", c0[narg-1])
	}

	var resstr, outstr string
	narg = int(math.Min(float64(n), float64(len(out))))
	for i := 0; i < narg-1; i++ {
		resstr += fmt.Sprintf("%v,", c1[i])
		outstr += fmt.Sprintf("%v,", out[i])
	}
	if len(out) > narg {
		resstr += fmt.Sprintf("%v,...", c1[narg-1])
		outstr += fmt.Sprintf("%v,...", out[narg-1])
	} else {
		resstr += fmt.Sprintf("%v", c1[narg-1])
		outstr += fmt.Sprintf("%v", out[narg-1])
	}

	t.Errorf("%v(%v) = %v, want %v", fname, argstr, outstr, resstr)
}

func bench(b *testing.B, cases []testcase, tag string, f benchfunc) float64 {
	var out float64
	for _, c := range cases {
		b.Run(tag, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				out = f(c[0])
			}
		})
	}
	return out
}

//
// Tests
//

var scHyp0F1 = []testcase{
	{{0, 1, NaN, 100}, {NaN}},
	{{0, 1, -2, NaN}, {NaN}},
	{{0, 1, +Inf, -Inf}, {0.36787944117144233}},
	{{0, 1, +Inf, +Inf}, {2.718281828459045}},
	{{0, 1, +Inf, 4567.98765}, {1}},
	{{0, 1, -3, 11}, {NaN}},
	{{0, 1, -4, 11}, {NaN}},
	{{0, 1, -4, -11}, {NaN}},
}
var cHyp0F1 = []testcase{
	{{0, 1, 9.876545678998766e+10, 0}, {1}},
	{{0, 1, 1, 2}, {4.2523508795026235}},
	{{0, 1, 2, 2}, {2.394833099273405}},
	{{0, 1, 2, 3}, {3.468649618760533}},
	{{0, 1, 2, 1}, {1.590636854637329}},
	{{0, 1, 3, 2}, {1.857517780229219}},
	{{0, 1, 3, 2.5}, {2.1420143462925894}},
	{{0, 1, 3, 25.5}, {197.08967324379037}},
	{{0, 1, 3, 255.5}, {3.9825092728943634e+10}},
	{{0, 1, 3, 2555.5}, {2.4708990611876765e+39}},
	{{0, 1, 3, 25555.5}, {1.2385461930270518e+133}},
	{{0, 1, 3, 125555.5}, {1.4154906008294558e+301}},
	{{0, 1, 3.3, 125555.5}, {3.2609755879144203e+300}},
	{{0, 1, 33.3, 125555.5}, {1.439580416960765e+259}},
	{{0, 1, 333.3, 125555.5}, {5.659525247124615e+120}},
	{{0, 1, 3333.3, 125555.5}, {1.8515880989407224e+16}},
	{{0, 1, 33333.3, 125555.5}, {43.226597470849484}},
	{{0, 1, 333333.3, 125555.5}, {1.4574179240855258}},
	{{0, 1, 3.3333333e+06, 125555.5}, {1.0383850296988064}},
	{{0, 1, 3.33333333e+07, 125555.5}, {1.0037737678013317}},
	{{0, 1, 3.333333333e+08, 125555.5}, {1.0003767374477712}},
	{{0, 1, 3.3333333333e+09, 125555.5}, {1.0000376673593976}},
	{{0, 1, 3.33333333333e+10, 125555.5}, {1.0000037666720938}},
	{{0, 1, 3.33333333333e+10, 1.25555555555e+10}, {1.4574184222488056}},
	{{0, 1, 3.33333333333e+10, 1.255555555555e+11}, {43.23570534342665}},
	{{0, 1, 3.333333333333e+11, 1.255555555555e+11}, {1.457418422253289}},
	{{0, 1, -3.0000001, 11}, {6.856654383928824e+09}},
	{{0, 1, -3000.0001, 110}, {0.963997631524568}},
	{{0, 1, -7.7, 2.5}, {0.7280854011698313}},
	{{0, 1, 77.7, -2.5}, {0.9683307048584084}},
	{{0, 1, -77.7, -25.5}, {1.389427154414045}},
	{{0, 1, 777.7, -25.5}, {0.9677420702617322}},
	{{0, 1, -777.7, 255.5}, {0.7200292734914648}},
	{{0, 1, -7777.7, -2555.5}, {1.3889867337813122}},
	// FIXME: function fails these tests.
	//	{{0, 1, -7.7, -77.77}, {1768.9475699750021}},
	//	{{0,1,-7.7, -154}, {3516.225323360214}},
	//	{{0,1,-7.7, -770}, {7.051795763569786e+07}},
}
var scHyp1F1 = []testcase{
	{{1, 1, 11, 11, 0.999}, {2.715564905318566687331982733345286907488}},
	{{1, 1, NaN, 100, 10}, {NaN}},
	{{1, 1, 0, -4, 5}, {1}},
	{{1, 1, 543, -4, 0}, {1}},
	{{1, 1, +Inf, +Inf, 1}, {2.718281828459045}},
	{{1, 1, +Inf, -Inf, 1}, {0.36787944117144233}},
	{{1, 1, +Inf, 1, -1}, {NaN}},
	{{1, 1, +Inf, 1, 1}, {NaN}},
	{{1, 1, 20, +Inf, 1}, {1}},
	{{1, 1, 20, -Inf, 1}, {1}},
	{{1, 1, -3.9, -4, 5}, {NaN}},
	{{1, 1, 3.9, -4, -5}, {NaN}},
	{{1, 1, 2, -4, 5}, {NaN}},
	{{1, 1, 2, -5, 5}, {NaN}},
}
var cHyp1F1 = []testcase{
	{{1, 1, -1, -4, -5}, {-1. / 4}},
	{{1, 1, -1, -4.1, -5}, {-0.21951219512195121951219512195121951219512195121951219512}},
	{{1, 1, -5.432, 2.2, -700.9}, {1.3727292185988063233762299021768245936154987855107037e+12}},
	{{1, 1, -5.432, 2.2, -9700.9}, {2.0692262222416140055851251664249965291876090468930709e+18}},
	{{1, 1, -5.432e-07, 2.2e-07, -9700.9}, {3.469109295491283049683835128457572813179185164196529536809}},
	{{1, 1, -11, 11, 9.999}, {-0.000486757541885359591903042751140800}},
	{{1, 1, 12.5, 11.75, 19.999}, {1.024636534533486247341780883267801707746e+09}},
	{{1, 1, 2.5, 3.5, 100}, {6.619995042577486e+41}},
	{{1, 1, 3.5, 2.5, -100}, {-1.450829630648126e-42}},
	{{1, 1, 2, 4, 5}, {21.707494910771032}},
	{{1, 1, 2, 4, -5}, {0.14626395019169272}},
	{{1, 1, -2, 4, -5}, {4.75}},
	{{1, 1, -2, -4, -5}, {0.5833333333333334}},
	{{1, 1, -2, -4, 5}, {5.583333333333333}},
	{{1, 1, -2, 4, 5}, {-0.25}},
	{{1, 1, 1, 1e+10, 5}, {1.0000000005}},
	{{1, 1, 1, 1e+08, 5}, {1.0000000500000026}},
	{{1, 1, -1, 1e+10, 5}, {0.9999999995}},
	{{1, 1, 10, 200, 5}, {1.2878814071276767}},
	{{1, 1, -10, 200, 5}, {0.7762152008143943}},
	{{1, 1, -10, -15, 5}, {22.655716268501486}},
	{{1, 1, -10, -1000, 5}, {1.0511413040709117}},
	{{1, 1, -10, -1000, 5000}, {6.239339006816543e+07}},
	{{1, 1, -10, -1000, 5e+07}, {1.0218603619401191e+47}},
	{{1, 1, -999, -1000, 0.005}, {1.0050074957967967}},
	{{1, 1, -543.43, -532.32, -324.432}, {-1.1198647713125607e+141}},
	{{1, 1, -10, 1, 5}, {1.7562761794532629}},
	// FIXME function fails these tests.
	//	{{1, 1, -50, 5, 5}, {0.0005715733149410122}},
	//	{{1, 1, -100, 10, 5}, {2.9224953421878733e-07}},
	//	{{1, 1, -100, 50, 5}, {3.982104307130384e-06}},
	//	{{1, 1, -1000, 100, 5}, {2.3849951368733384e-29}},
	//	{{1, 1, -10000, 1000, 5}, {4.389355758473254e-23}},
	//	{{1, 1, -100000, 10000, 5}, {1.6793620777269317e-22}},
	//	{{1, 1, -100000, 20000, 5}, {1.3629514086965236e-11}},
	//	{{1, 1, -100000, 30000, 5}, {5.743051141607582e-08}},
	//	{{1, 1, -100000, 50000, 5}, {4.533185960204361e-05}},
}
var scHyp2F1 = []testcase{
	{{2, 1, +Inf, 9, -Inf, 1}, {1. / 512}},
	{{2, 1, 11, 9, -7, 0}, {1}},
	{{2, 1, -11, -9, -7, -5}, {NaN}},
	{{2, 1, 11, 9, -7, 0.1}, {NaN}},
	{{2, 1, -10.1, -1.02, -5.0003, 1.999}, {NaN}},
	{{2, 1, 1, 2.2, 1, 1.5}, {NaN}},
	{{2, 1, 1, 2, 1, 0.5}, {4}},
	{{2, 1, 3, 4, 8, 1}, {35}},
	{{2, 1, 3, 4, 8, -1}, {0.320051626105340984775197726448510982379}},
}
var cHyp2F1 = []testcase{
	{{2, 1, 11, 9, 7, 0.1}, {4.392161690778547690302457429384115309585456127951100973539}},
	{{2, 1, 1, 2, 11, -0.5}, {0.918967125770628926427512111627668135785112812919289317012}},
	{{2, 1, -10.1, -1.02, -5.3, 0.999}, {-0.86248371770779415948376560290918292774539519280219510389}},
	{{2, 1, -11, 9.1, 7.1, 5.1}, {-4.3001996210395527789968701095461658841940532081377151e+07}},
	{{2, 1, -7, -9, -11, -5}, {629856. / 11}},
	{{2, 1, -10, -1, -5, 11.9}, {-22.8}},
}
var scHyp4F2 = []testcase{
	{{4, 2, 11, 9, -7, +Inf, -Inf, -Inf, +Inf}, {-3.092849723114612e+15}},
	{{4, 2, 11, -9, +Inf, +Inf, -Inf, -Inf, 0.5}, {-2.46925295e+07}},
	{{4, 2, 11, -9, 1, 1, 1, 1, 0.5}, {-2.46925295e+07}},
	{{4, 2, 11, 9, -7, 0, 10, -1, 0.17}, {1}},
	{{4, 2, 11, 9, 7, 1, 10, 1, 1.17}, {NaN}},
}
var cHyp4F2 = []testcase{
	{{4, 2, 11, -9, 7, 1, 10, 1, 0.17}, {-11.06499762995341472}},
	{{4, 2, 11, -9, 7, 2, 10, 1, 0.17}, {-153.3454736343267104}},
	{{4, 2, -11, 9, 7, 2, 9, 7, 0.999}, {-1.88635604926837706836493630679805453798e+08}},
}
var cHyp8F3 = []testcase{
	{{8, 3, 11, -9, 7, 1, 10, 1, 0.17, 19, -23.4, 0.05, -2.222, 0.25}, {-4.895478076551896507233928858925372381540110041948574e+34}},
	{{8, 3, 11, -9, 7, 2, 10, 1, 0.17, 19, 23.4, 0.05, -2.222, 0.25}, {2.1000378589121131237021537084010298935635405372296384e+34}},
	{{8, 3, -11, 9, 7, 2, 9, 7, 0.17, 19, 23.4, 0.05, -2.222, 0.25}, {1.4411904034175893283258108991983096641926408333514947e+46}},
}

func TestHypPFQ(t *testing.T) {
	name := "HypPQF"
	f := HypPFQ
	testall(t, tol, name,
		[][]testcase{scHyp0F1, cHyp0F1, scHyp1F1, cHyp1F1, scHyp2F1, cHyp2F1, scHyp4F2, cHyp4F2, cHyp8F3},
		[]string{"0F1/sc", "OF1", "1F1/sc", "1F1", "2F1/sc", "2F1", "4F2/sc", "4F2", "8F3"},
		func(x []float64) []float64 {
			y := make([]float64, len(x[2:]))
			copy(y, x[2:])
			p := int(x[0])
			q := int(x[1])
			return []float64{f(y[:p], y[p:p+q], y[p+q])}
		})
}
func BenchmarkHyp0f1(b *testing.B) {
	GlobalF = bench(b, cHyp0F1, "",
		func(x []float64) float64 {
			p := int(x[0])
			q := int(x[1])
			y := x[2:]
			return HypPFQ(y[:p], y[p:p+q], y[p+q])
		})
}
func BenchmarkHyp1F1(b *testing.B) {
	GlobalF = bench(b, cHyp1F1, "",
		func(x []float64) float64 {
			p := int(x[0])
			q := int(x[1])
			y := x[2:]
			return HypPFQ(y[:p], y[p:p+q], y[p+q])
		})
}
func BenchmarkHyp2F1(b *testing.B) {
	GlobalF = bench(b, cHyp2F1, "",
		func(x []float64) float64 {
			p := int(x[0])
			q := int(x[1])
			y := x[2:]
			return HypPFQ(y[:p], y[p:p+q], y[p+q])
		})
}
func BenchmarkHyp4F2(b *testing.B) {
	GlobalF = bench(b, cHyp4F2, "",
		func(x []float64) float64 {
			p := int(x[0])
			q := int(x[1])
			y := x[2:]
			return HypPFQ(y[:p], y[p:p+q], y[p+q])
		})
}
func BenchmarkHyp8F3(b *testing.B) {
	GlobalF = bench(b, cHyp8F3, "",
		func(x []float64) float64 {
			p := int(x[0])
			q := int(x[1])
			y := x[2:]
			return HypPFQ(y[:p], y[p:p+q], y[p+q])
		})
}

var scChebyshevT = []testcase{
	{{10, NaN}, {NaN}},
	{{2, -Inf}, {Inf}},
	{{3, -Inf}, {-Inf}},
	{{0, 1e5}, {1}},
	{{1, 2.32}, {2.32}},
	{{2, 1}, {1}},
}
var cChebyshevT = []testcase{
	{{3, 0}, {0}},
	{{3, -1.4}, {-6.776}},
	{{3, -4.4}, {-327.536}},
	{{10, 1.5}, {7563.5}},
	{{10, 2.5}, {3.1878115e+06}},
	{{-10, 2.5}, {3.1878115e+06}},
	{{16, 1.99}, {6.4547281837215034665541948954599646855168e+08}},
	{{16, 2.01}, {7.7645467147944436800278539843101104570368e+08}},
	{{21, 1.99}, {4.5397997222940012819233231892806517536441070434281062e+11}},
	{{21, 2.01}, {5.7856114552320908000776537065472996521518573992122777e+11}},
	{{33, 1.1}, {1.137797818669236239727592226862531608576e+06}},
	{{33, 11.1}, {1.2573303347299275791374654815312863736714899871905607e+44}},
	{{45, 1.1}, {2.33204023744382373329089820779559738469382871230447616e+08}},
	{{49, 0.8}, {0.9933225511631933137689172339171888803034293075968}},
	{{50, 0.8}, {0.72543585253527006118086083303004714053466679410688}},
	{{104, 1.01}, {1.20554806345269569487292725745680604127300849997758017e+06}},
	{{104, 2.01}, {2.7632467820681488252250407833556540138929819278563989e+59}},
	{{500, 0.99}, {-0.08380355257963498672175647692443430558653333875743719137}},
	{{500, 1.99}, {2.5992231515700692225279870727691535302914749336133571e+284}},
	{{500, 2.01}, {8.3615293546276484931403502395120260481233491510195613e+286}},
	{{500, -2.01}, {8.3615293546276484931403502395120260481233491510195613e+286}},
}

func TestChebyshevT(t *testing.T) {
	name := "ChebyshevT"
	f := ChebyshevT
	testall(t, tol, name, [][]testcase{scChebyshevT, cChebyshevT}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkChebyshevT(b *testing.B) {
	GlobalF = bench(b, cChebyshevT, "",
		func(x []float64) float64 {
			return ChebyshevT(int(x[0]), x[1])
		})
}

var scChebyshevU = []testcase{
	{{1, NaN}, {NaN}},
	{{9, +Inf}, {+Inf}},
	{{8, -Inf}, {+Inf}},
	{{9, -Inf}, {-Inf}},
	{{10, 0}, {-1}},
	{{11, 1}, {12}},
	{{11, -1}, {-12}},
}
var cChebyshevU = []testcase{
	{{0, -10}, {1}},
	{{-1, -10}, {0}},
	{{1, -10}, {-20}},
	{{-3, -10}, {20}},
	{{7, 5.653}, {2.2519643853535446868221009536e7}},
	{{8, 0.5}, {0}},
	{{20, 0.5}, {0}},
	{{245670, 0.5}, {1}},
	{{25, 0.5653}, {0.105630867205347272993912993337121475070982482742753766493}},
	{{30, 0.5653}, {-1.18177274966401757535034244348459911795334580348773313111}},
	{{35, 0.5653}, {-0.42984855978448930094170152092996456093723793883277198979}},
	{{40, 0.5653}, {1.063844401551898424263404702891522637719226917792708881171}},
	{{45, 0.5653}, {0.721712775838257655684186817270448626911644083898522515063}},
	{{50, 0.5653}, {-0.86584351605704141337582479184684637573379523593343539188}},
	{{55, 0.5653}, {-0.95925572729862559356220671466378093788234830630883282836}},
	{{60, 0.5653}, {0.602673055757878362533262379941036844843258229786532292707}},
	{{65, 0.5653}, {1.124598232930941201752002058361094321608390848492674516388}},
	{{70, 0.5653}, {-0.29414111147069492240964626250844884272839686914039346154}},
	{{45, 5.653}, {1.7686985723826779106719444610315516285595747943381758e+47}},
	{{46, 5.653}, {1.9839223748822886791906710760502109724856533950369382e+48}},
	{{50, 5.653}, {3.1405670960834079758171585620307991794780247203737677e+52}},
	{{55, 5.653}, {5.5765079697637498211781120028940424070932320832542064e+57}},
	{{60, 5.653}, {9.9018553609697263342068339928657930451421065028266957e+62}},
	{{65, 5.653}, {1.7582103373864394291770183488355909200781115790457421e+68}},
	{{70, 5.653}, {3.1219437951775878656607929222332593137931640196471191e+73}},
	{{19, 2e+08}, {2.7487790694399996907623546880000146028888063999996241e+163}},
	{{67, 1.5e+04}, {9.2709456349204110975326780846673773440744578594774910e+299}},
}

func TestChebyshevU(t *testing.T) {
	name := "ChebyshevU"
	f := ChebyshevU
	testall(t, tol, name, [][]testcase{scChebyshevU, cChebyshevU}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkChebyshevU(b *testing.B) {
	GlobalF = bench(b, cChebyshevU, "",
		func(x []float64) float64 {
			return ChebyshevU(int(x[0]), x[1])
		})
}

var scJacobiP = []testcase{
	{{2, 1, 1, NaN}, {NaN}},
	{{53, -100, 1, 2.222}, {NaN}},
	{{-2, 1, 1, 2}, {0}},
	{{0, 2.1, 2.3, 3.4}, {1}},
	{{1, 1, 1, -3.141}, {-6.282}},
	{{1, 2, 3, 3}, {10}},
}
var cJacobiP = []testcase{
	{{2, 0, 10, 3.5}, {175.6875}},
	{{22, -11.5, -51.325, 3.5}, {5.02848534357238466003561113176435788066699268664268947e+09}},
	{{40, 20, 15, 4.32455}, {3.7288383613028486979974922944450017018359467994585040e+44}},
	{{41, 19, 17, -12.12}, {-1.047080376480031833608451115342239184829088792271637e+64}},
	{{41, 19, -17, -12.12}, {-4.266318761115648840302672836461948191620566162114378e+55}},
	{{41, -17, 19, 12.12}, {4.266318761115648840302672836461948191620566162114378e+55}},
	{{53, 1, -1, 2.222}, {1.5050143074960853494568306577510749612555809495544448e+32}},
	{{53, -1, 1, 2.222}, {5.7080306758541784513850001979261750547930475492102161e+31}},
	{{3, -1, -1, 2.222}, {4.374322524}},
	{{3, -3, 1, 0.222}, {-0.235455476}},
	{{3, -3, 1, -0.222}, {-0.912396524}},
	{{24, -23, -13, -0.222}, {0}},
	{{24, -10, -13, -0.222}, {-1.4477482169375526351080034565874610694581906994323984e-07}},
}

func TestJacobiP(t *testing.T) {
	name := "JacobiP"
	f := JacobiP
	testall(t, tol, name, [][]testcase{scJacobiP, cJacobiP}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1], x[2], x[3])}
		})
}
func BenchmarkJacobiP(b *testing.B) {
	GlobalF = bench(b, cJacobiP, "",
		func(x []float64) float64 {
			return JacobiP(int(x[0]), x[1], x[2], x[3])
		})
}

var scZernikeR = []testcase{
	{{-1, 20, 1.1}, {NaN}},
	{{987, 988, 98765432.1234567}, {0}},
}
var cZernikeR = []testcase{
	{{7, 5, 3.3}, {27484.7865039}},
	{{43, 41, 53.5}, {8.9646400010525796235939120335742702428482112823125695e+75}},
}

func TestZernikeR(t *testing.T) {
	name := "ZernikeR"
	f := ZernikeR
	testall(t, tol, name, [][]testcase{scZernikeR, cZernikeR}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), int(x[1]), x[2])}
		})
}
func BenchmarkZernikeR(b *testing.B) {
	GlobalF = bench(b, cZernikeR, "",
		func(x []float64) float64 {
			return ZernikeR(int(x[0]), int(x[1]), x[2])
		})
}

var scGegenbauerC = []testcase{
	{{2, 1, NaN}, {NaN}},
	{{-2, 1, 2}, {NaN}},
	{{0, 3.3, 1}, {1}},
	{{1, 1, -3.141}, {-6.282}},
	{{1, 2, 3}, {12}},
}
var cGegenbauerC = []testcase{
	{{2, 10, 3.5}, {2685}},
	{{22, 10, 3.5}, {5.7734358481154896492250325e+25}},
	{{40, 15, 4.3255}, {6.6613993107922727134428780696365820449481333572147195e+49}},
	{{40, -15, 4.3255}, {0}},
	{{40, -14.9, 4.3255}, {-1.280764317783101302989751939635266543812346402681405e+24}},
}

func TestGegenbauerC(t *testing.T) {
	name := "GegenbauerC"
	f := GegenbauerC
	testall(t, tol, name, [][]testcase{scGegenbauerC, cGegenbauerC}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1], x[2])}
		})
}
func BenchmarkGegenbauerC(b *testing.B) {
	GlobalF = bench(b, cGegenbauerC, "",
		func(x []float64) float64 {
			return GegenbauerC(int(x[0]), x[1], x[2])
		})
}

var scLegendreP = []testcase{
	{{2, NaN}, {NaN}},
	{{0, 1.21}, {1}},
	{{1, -3.141}, {-3.141}},
}
var cLegendreP = []testcase{
	{{153, 1e-5}, {0.000098854224351825737394494825999239936670301828815467202}},
	{{-2, -3.141}, {-3.141}},
}

func TestLegendreP(t *testing.T) {
	name := "LegendreP"
	f := LegendreP
	testall(t, tol, name, [][]testcase{scLegendreP, cLegendreP}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkLegendreP(b *testing.B) {
	GlobalF = bench(b, cLegendreP, "",
		func(x []float64) float64 {
			return LegendreP(int(x[0]), x[1])
		})
}

var scLegendreAP = []testcase{
	{{2, 10, 3.5}, {0}},
	{{-10, 10, 3.5}, {0}},
	{{153, 11, 1.1}, {NaN}},
}
var cLegendreAP = []testcase{
	{{3, 0, -0.9}, {-0.4725}},
	{{10, -3, 0.98}, {0.000127413538489068664787307858757370814480523438403071987}},
	{{22, 10, 3.5}, {-6.309576310867162196764903515496706859266851097345352e+29}},
	{{153, 11, 1e-5}, {7.1211274720051580808679401818532702913164641927292374e+22}},
	{{-154, 11, 1e-5}, {7.1211274720051580808679401818532702913164641927292374e+22}},
}

func TestLegendreAP(t *testing.T) {
	name := "LegendreAP"
	f := LegendreAP
	testall(t, tol, name, [][]testcase{scLegendreAP, cLegendreAP}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), int(x[1]), x[2])}
		})
}
func BenchmarkLegendreAP(b *testing.B) {
	GlobalF = bench(b, cLegendreAP, "",
		func(x []float64) float64 {
			return LegendreAP(int(x[0]), int(x[1]), x[2])
		})
}

var scSphericalHarmonicY = []testcase{
	{{2, 1, 1, NaN}, {NaN, NaN}},
	{{-22, -20, 10, 3.5}, {NaN, NaN}},
	{{0, 0, -7.21, 7.11}, {0.282094791773878143474039725780386292922025314664499428422, 0}},
}
var cSphericalHarmonicY = []testcase{
	{{22, -20, 10, 3.5}, {0.00004474740985105335681955012220070375819491035216485506, -0.00005467954127843340910384743380389943632078690198859652}},
	{{31, 31, -10, 3.5}, {5.20105344181401315495645487292339772715804207504464e-10, -4.50058978347382319639863845184135153633008312108735e-09}},
	{{7, -7, -7, 7}, {-0.0079410539609713541755773378737370761151396061682892738, -0.025196238025923628008773731309078469019874758134402119}},
}

func TestSphericalHarmonicY(t *testing.T) {
	name := "SphericalHarmonicY"
	f := SphericalHarmonicY
	testall(t, tol, name, [][]testcase{scSphericalHarmonicY, cSphericalHarmonicY}, []string{"sc", ""},
		func(x []float64) []float64 {
			r, i := f(int(x[0]), int(x[1]), x[2], x[3])
			return []float64{r, i}
		})
}
func BenchmarkSphericalHarmonicY(b *testing.B) {
	GlobalF = bench(b, cSphericalHarmonicY, "",
		func(x []float64) float64 {
			r, _ := SphericalHarmonicY(int(x[0]), int(x[1]), x[2], x[3])
			return r
		})
}

var scLegendreQ = []testcase{
	{{2, NaN}, {NaN}},
	{{-2, 2}, {NaN}},
	{{1, 1.1}, {NaN}},
	{{0, 0.9}, {1.472219489583220230004513715943926768618689630649564409268}},
	{{1, 0.999}, {2.796400966082949831744191300541195457801412019535269391030}},
}
var cLegendreQ = []testcase{
	{{11, 0.999}, {0.665248555792627905833229643332143091673876114974304501168}},
	{{101, -0.10101}, {0.082745695703743357501272084016026991789721245950554478861}},
}

func TestLegendreQ(t *testing.T) {
	name := "LegendreQ"
	f := LegendreQ
	testall(t, tol, name, [][]testcase{scLegendreQ, cLegendreQ}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkLegendreQ(b *testing.B) {
	GlobalF = bench(b, cLegendreQ, "",
		func(x []float64) float64 {
			return LegendreQ(int(x[0]), x[1])
		})
}

var scLaguerreL = []testcase{
	{{2, NaN}, {NaN}},
	{{-2, 2}, {NaN}},
	{{0, 1.21}, {1}},
	{{1, -3.141}, {4.141}},
}
var cLaguerreL = []testcase{
	{{2, 3.5}, {0.125}},
	{{22, 3.5}, {-0.46670027635922204483686005709132609588515316543499753499}},
	{{41, -4.3255}, {4.31280964460014077797090383609544382702962848439229792e+09}},
}

func TestLaguerreL(t *testing.T) {
	name := "LaguerreL"
	f := LaguerreL
	testall(t, tol, name, [][]testcase{scLaguerreL, cLaguerreL}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkLaguerreL(b *testing.B) {
	GlobalF = bench(b, cLaguerreL, "",
		func(x []float64) float64 {
			return LaguerreL(int(x[0]), x[1])
		})
}

var scLaguerreAL = []testcase{
	{{2, 1, NaN}, {NaN}},
	{{-2, 1, 2}, {NaN}},
	{{0, 22, 9.98}, {1}},
	{{1, 1, -3.141}, {5.141}},
	{{41, -47, 4.3255}, {NaN}},
}
var cLaguerreAL = []testcase{
	{{2, -1, 3.5}, {2.625}},
	{{22, 10, 3.5}, {25252.39978746937700539858666621210279857995048910207458046}},
	{{41, 17, -4.3255}, {4.2086917252857569297940591579340234265295868262479278e+17}},
	{{41, -17, 4.3255}, {4.9579126998422110619614409645401386382056238641622942e-08}},
}

func TestLaguerreAL(t *testing.T) {
	name := "LaguerreAL"
	f := LaguerreAL
	testall(t, tol, name, [][]testcase{scLaguerreAL, cLaguerreAL}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1], x[2])}
		})
}
func BenchmarkLaguerreAL(b *testing.B) {
	GlobalF = bench(b, cLaguerreAL, "",
		func(x []float64) float64 {
			return LaguerreAL(int(x[0]), x[1], x[2])
		})
}

var scHermiteH = []testcase{
	{{2, NaN}, {NaN}},
	{{-2, 2}, {NaN}},
	{{0, 1.1111}, {1}},
	{{1, 1.1111}, {2.2222}},
}
var cHermiteH = []testcase{
	{{4, 5.5}, {13201}},
	{{43, 53.5}, {1.56492249523929575819638209988328890215202268133174998288e+87}},
}

func TestHermiteH(t *testing.T) {
	name := "HermiteH"
	f := HermiteH
	testall(t, tol, name, [][]testcase{scHermiteH, cHermiteH}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkHermiteH(b *testing.B) {
	GlobalF = bench(b, cHermiteH, "",
		func(x []float64) float64 {
			return HermiteH(int(x[0]), x[1])
		})
}

var scSi = []testcase{
	{{NaN}, {NaN}},
	{{-Inf}, {-1.5707963267948966}},
	{{0}, {0}},
}
var cSi = []testcase{
	{{1}, {0.946083070367183}},
	{{2}, {1.6054129768026948}},
	{{4}, {1.7582031389490531}},
	{{5}, {1.549931244944674}},
	{{10}, {1.6583475942188741}},
	{{15}, {1.6181944437083688}},
	{{20}, {1.54824170104344}},
	{{25}, {1.5314825509999612}},
	{{1000}, {1.5702331219687713}},
	{{-4.0001}, {-1.7581842183061578}},
	{{-25}, {-1.5314825509999612}},
}

func TestSi(t *testing.T) {
	name := "Si"
	f := Si
	testall(t, tol, name, [][]testcase{scSi, cSi}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkSi(b *testing.B) {
	bench(b, cSi, "",
		func(x []float64) float64 {
			return Si(x[0])
		})
}

var scCi = []testcase{
	{{-1}, {NaN}},
	{{+Inf}, {0}},
}
var cCi = []testcase{
	{{1}, {0.33740392290096816}},
	{{2}, {0.422980828774865}},
	{{4.0001}, {-0.14099803782717715}},
	{{1000}, {0.0008263155110906822}},
}

func TestCi(t *testing.T) {
	name := "Ci"
	f := Ci
	testall(t, tol, name, [][]testcase{scCi, cCi}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkCi(b *testing.B) {
	bench(b, cCi, "",
		func(x []float64) float64 {
			return Ci(x[0])
		})
}

var scCin = []testcase{
	{{0}, {0}},
}
var cCin = []testcase{
	{{4}, {2.104491723908354}},
	{{-4}, {2.104491723908354}},
	{{10}, {2.9252571909000338}},
	{{-10}, {2.9252571909000338}},
}

func TestCin(t *testing.T) {
	name := "Cin"
	f := Cin
	testall(t, tol, name, [][]testcase{scCin, cCin}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkCin(b *testing.B) {
	bench(b, cCin, "",
		func(x []float64) float64 {
			return Cin(x[0])
		})
}

var scShi = []testcase{
	{{0}, {0}},
}
var cShi = []testcase{
	{{2}, {2.5015674333549756}},
	{{7.9}, {202.35036897887048}},
	{{-7.9}, {-202.35036897887048}},
	{{9}, {518.9391515822219}},
	{{10}, {1246.1144901994232}},
	{{20}, {1.2807826332028294e+07}},
	{{80}, {3.5073000024524e+32}},
}

func TestShi(t *testing.T) {
	name := "Shi"
	f := Shi
	testall(t, tol, name, [][]testcase{scShi, cShi}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkShi(b *testing.B) {
	bench(b, cShi, "",
		func(x []float64) float64 {
			return Shi(x[0])
		})
}

var scChi = []testcase{}
var cChi = []testcase{
	{{20}, {1.28078263320282943610629339487996274627064136343962909e+07}},
}

func TestChi(t *testing.T) {
	name := "Chi"
	f := Chi
	testall(t, tol, name, [][]testcase{scChi, cChi}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}

var scZeta = []testcase{
	{{NaN}, {NaN}},
	{{-1}, {-0.08333333333333333}},
	{{0}, {-0.5}},
	{{1}, {+Inf}},
	{{+Inf}, {1}},
}
var cZeta = []testcase{
	{{1e-08}, {-0.5000000091893855}},
	{{0.9999999999}, {-9.999999172019142e+09}},
	{{1.0000000001}, {9.999999173173574e+09}},
	{{1.0000001}, {1.0000000571377e+07}},
	{{5}, {1.03692775514337}},
	{{7}, {1.008349277381923}},
	{{9}, {1.0020083928260821}},
	{{10}, {1.000994575127818}},
	{{10.5}, {1.000700842641736}},
	{{11}, {1.0004941886041194}},
	{{12}, {1.000246086553308}},
	{{15}, {1.000030588236307}},
	{{20}, {1.0000009539620338}},
	{{25}, {1.0000000298035034}},
	{{50}, {1.0000000000000009}},
	{{75}, {1}},
	{{750}, {1}},
	{{-1.00000001}, {-0.08333333167912192}},
	{{-2}, {0}},
	{{-64}, {0}},
	{{-1e+06}, {0}},
	{{-1e-08}, {-0.49999999081061475}},
	{{-1e-06}, {-0.49999908106247}},
	{{-10.2}, {0.004134657457445868}},
	{{-11}, {0.021092796092796094}},
	{{-3.2}, {0.007011972077091051}},
}

func TestZeta(t *testing.T) {
	name := "Zeta"
	f := Zeta
	testall(t, tol, name, [][]testcase{scZeta, cZeta}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkZeta(b *testing.B) {
	bench(b, cZeta, "",
		func(x []float64) float64 {
			return Zeta(x[0])
		})
}

var scEta = []testcase{
	{{NaN}, {NaN}},
	{{-1}, {0.25}},
	{{0}, {0.5}},
	{{1}, {0.6931471805599453}},
}
var cEta = []testcase{
	{{+Inf}, {1}},
	{{-2}, {0}},
	{{-1000}, {0}},
	{{-1.1}, {0.2234614116270079}},
	{{1.1}, {0.7088088499305867}},
}

func TestEta(t *testing.T) {
	name := "Eta"
	f := Eta
	testall(t, tol, name, [][]testcase{scEta, cEta}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}

var scEi = []testcase{
	{{NaN}, {NaN}},
	{{750}, {+Inf}},
	{{+Inf}, {+Inf}},
	{{-Inf}, {0}},
	{{0}, {-Inf}},
}
var cEi = []testcase{
	{{1e-05}, {-10.935699800043695}},
	{{1e-10}, {-22.448635264938925}},
	{{0.01}, {-4.017929465426669}},
	{{1}, {1.8951178163559368}},
	{{2}, {4.95423435600189}},
	{{5}, {40.18527535580318}},
	{{6}, {85.9897621424392}},
	{{6.01}, {86.66495316518093}},
	{{7.5}, {289.3883982001446}},
	{{8}, {440.37989953483816}},
	{{9}, {1037.8782907170896}},
	{{10}, {2492.2289762418777}},
	{{10.00001}, {2492.251002806792}},
	{{15}, {234955.8524907683}},
	{{20}, {2.5615652664056588e+07}},
	{{25}, {3.0059509065255485e+09}},
	{{27.5}, {3.3153303643324104e+10}},
	{{29.99}, {3.654282129023645e+11}},
	{{30}, {3.689732094072742e+11}},
	{{35}, {4.669055014466159e+13}},
	{{40}, {6.039718263611242e+15}},
	{{45}, {7.943916035704454e+17}},
	{{50}, {1.058563689713169e+20}},
	{{100}, {2.71555274485388e+41}},
	{{200}, {3.6312352331593567e+84}},
	{{705}, {2.138148975687854e+303}},
	{{716}, {1.2605029106040893e+308}},
	{{-1e-100}, {-229.68129363450305}},
	{{-1e-10}, {-22.448635265138925}},
	{{-1e-05}, {-10.935719800043696}},
	{{-0.01}, {-4.037929576538114}},
	{{-1}, {-0.21938393439552029}},
	{{-2}, {-0.04890051070806112}},
	{{-4}, {-0.0037793524098489067}},
	{{-4.0000001}, {-0.0037793519519579615}},
	{{-5}, {-0.0011482955912753257}},
	{{-6}, {-0.0003600824521626587}},
	{{-7}, {-0.00011548173161033822}},
	{{-8}, {-3.76656228439249e-05}},
	{{-9}, {-1.2447354178006272e-05}},
	{{-10}, {-4.156968929685325e-06}},
	{{-11}, {-1.4003003042474418e-06}},
	{{-12}, {-4.7510818246724936e-07}},
	{{-13}, {-1.6218662188014328e-07}},
	{{-14}, {-5.5656311111451816e-08}},
	{{-15}, {-1.918627892147867e-08}},
	{{-20}, {-9.835525290649882e-11}},
	{{-30}, {-3.0215520106888124e-15}},
	{{-50}, {-3.783264029550459e-24}},
	{{-100.5}, {-2.2232069135926296e-46}},
	{{-105.5}, {-1.427644740730669e-48}},
	{{-500}, {-1.4220767822536383e-220}},
	{{-700}, {-1.406518766234033e-307}},
}

func TestEi(t *testing.T) {
	name := "Ei"
	f := Ei
	testall(t, tol, name, [][]testcase{scEi, cEi}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkEi(b *testing.B) {
	GlobalF = bench(b, cEi, "",
		func(x []float64) float64 {
			return Ei(x[0])
		})
}

var scEn = []testcase{
	{{1, NaN}, {NaN}},
	{{-1, 2}, {NaN}},
	{{1, +Inf}, {0}},
	{{1, -1}, {-1.8951178163559368}},
	{{1, 0}, {+Inf}},
	{{1, -720}, {-Inf}},
	{{2, -1}, {NaN}},
}
var cEn = []testcase{
	{{1, -100000}, {-Inf}},
	{{5, 0}, {0.25}},
	{{0, 1e-08}, {9.9999999e+07}},
	{{2, 1e-08}, {0.9999998115653491}},
	{{3, 1e-08}, {0.49999999000000095}},
	{{4, 1e-08}, {0.3333333283333334}},
	{{5, 1e-08}, {0.2499999966666667}},
	{{6, 1e-08}, {0.19999999750000003}},
	{{7, 1e-08}, {0.1666666646666667}},
	{{8, 1e-08}, {0.1428571411904762}},
	{{9, 1e-08}, {0.12499999857142859}},
	{{10, 1e-08}, {0.11111110986111111}},
	{{20, 1e-08}, {0.052631578391812865}},
	{{100, 1e-08}, {0.010101009998969285}},
	{{2, 1}, {0.14849550677592205}},
	{{5, 1}, {0.0704542374617204}},
	{{10, 1}, {0.0363939940314164}},
	{{20, 1}, {0.018345971206755872}},
	{{100, 1}, {0.003678422930396813}},
	{{2, 1.99999}, {0.03753475082898094}},
	{{2, 2}, {0.03753426182049045}},
	{{5, 2}, {0.02132240020232302}},
	{{10, 2}, {0.012092085136400296}},
	{{20, 2}, {0.0064143058553249}},
	{{100, 2}, {0.0013396881216721757}},
	{{2, 5}, {0.000996469042708838}},
	{{5, 5}, {0.0007057606934245853}},
	{{10, 5}, {0.0004691048076578119}},
	{{20, 5}, {0.0002782745928857308}},
	{{100, 5}, {6.475775388266509e-05}},
	{{2, 25}, {5.156944766134789e-13}},
	{{3, 25}, {4.977909748135229e-13}},
	{{4, 25}, {4.810564982086496e-13}},
	{{5, 25}, {4.653828524369453e-13}},
	{{6, 25}, {4.5067451080807775e-13}},
	{{7, 25}, {4.3684684912701285e-13}},
	{{8, 25}, {4.238246623983856e-13}},
	{{9, 25}, {4.115409131255475e-13}},
	{{10, 25}, {3.999356707583703e-13}},
	{{11, 25}, {3.8895520960047644e-13}},
	{{20, 25}, {3.1162408463648225e-13}},
	{{30, 25}, {2.5499537807523303e-13}},
	{{50, 25}, {1.8681837014276917e-13}},
	{{100, 25}, {1.1181687061260001e-13}},
	{{2, 500}, {1.4192495473093422e-220}},
	{{5, 500}, {1.4108347621366478e-220}},
	{{10, 500}, {1.3970292719286189e-220}},
	{{20, 500}, {1.3702118216839137e-220}},
	{{1000, 500}, {4.75182858947099e-221}},
}

func TestEn(t *testing.T) {
	name := "En"
	f := En
	testall(t, tol, name, [][]testcase{scEn, cEn}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkEn(b *testing.B) {
	GlobalF = bench(b, cEn, "",
		func(x []float64) float64 {
			return En(int(x[0]), x[1])
		})
}

var scLi = []testcase{
	{{-1}, {NaN}},
}
var cLi = []testcase{
	{{1e-300}, {-1.4455586289196509e-303}},
	{{1e-100}, {-4.324245377202095e-103}},
	{{1e-50}, {-8.611722553713826e-53}},
	{{1e-25}, {-1.707997398334023e-27}},
	{{1e-15}, {-2.815944392958954e-17}},
	{{1e-14}, {-3.0113475954567504e-16}},
	{{1e-13}, {-3.2359176090698706e-15}},
	{{1e-12}, {-3.4967184067697225e-14}},
	{{1e-10}, {-4.168887750019648e-12}},
	{{1e-08}, {-5.161659103222967e-10}},
	{{1e-07}, {-5.859859508790472e-09}},
	{{1e-05}, {-8.036767291447334e-07}},
	{{2}, {1.045163780117493}},
	{{1e+250}, {1.740206254656917e+247}},
}

func TestLi(t *testing.T) {
	name := "Li"
	f := Li
	testall(t, tol, name, [][]testcase{scLi, cLi}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkLi(b *testing.B) {
	GlobalF = bench(b, cLi, "",
		func(x []float64) float64 {
			return Li(x[0])
		})
}

var scLi2 = []testcase{
	{{-1}, {NaN}},
	{{+Inf}, {+Inf}},
	{{1}, {-Inf}},
}
var cLi2 = []testcase{
	{{1e-321}, {-1.045163780117493}},
	{{1e-100}, {-1.045163780117493}},
	{{1e-10}, {-1.0451637801216618}},
	{{1e+250}, {1.740206254656917e+247}},
}

func TestLi2(t *testing.T) {
	name := "Li2"
	f := Li2
	testall(t, tol, name, [][]testcase{scLi2, cLi2}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}

var scBeta = []testcase{
	{{NaN, 1}, {NaN}},
	{{-Inf, -Inf}, {NaN}},
	{{+Inf, +Inf}, {0}},
	{{+Inf, 190.7}, {0}},
	{{0.986, -Inf}, {NaN}},
	{{-3, -7}, {+Inf}},
	{{10, -10}, {0.1}},
	{{-15, 15}, {-0.06666666666666667}},
	{{1.5, -2.5}, {0}},
	{{3.54, -1}, {-Inf}},
	{{-1, 3.54}, {-Inf}},
	{{0, 12}, {+Inf}},
	{{+Inf, -7}, {-Inf}},
	{{-8, +Inf}, {+Inf}},
	{{8, +Inf}, {0}},
}
var cBeta = []testcase{
	{{300, 200}, {1.6485491608664747e-147}},
	{{0.5, -0.75}, {1.74803836952808}},
	{{100000, 1e-05}, {99987.91060292121}},
	{{-1.123, -1.132}, {-33.830986471614295}},
	{{-112.3, -113.2}, {-2.668986182849379e+67}},
}

func TestBeta(t *testing.T) {
	name := "Beta"
	f := Beta
	testall(t, tol, name, [][]testcase{scBeta, cBeta}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0], x[1])}
		})
}

var scDigamma = []testcase{
	{{NaN}, {NaN}},
	{{-Inf}, {NaN}},
	{{+Inf}, {+Inf}},
	{{-2}, {NaN}},
}
var cDigamma = []testcase{
	{{1e+08}, {18.420680738952367}},
	{{1e-08}, {-1.0000000057721564e+08}},
	{{-1e-08}, {9.999999942278431e+07}},
	{{10}, {2.251752589066721}},
	{{-10.2}, {6.6946384504174965}},
	{{4.9}, {1.483737793254897}},
	{{-4.9}, {-7.981008564556067}},
}

func TestDigamma(t *testing.T) {
	name := "Digamma"
	f := Digamma
	testall(t, tol, name, [][]testcase{scDigamma, cDigamma}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkDigamma(b *testing.B) {
	GlobalF = bench(b, cDigamma, "",
		func(x []float64) float64 {
			return Digamma(x[0])
		})
}

var scTrigamma = []testcase{
	{{NaN}, {NaN}},
	{{-Inf}, {NaN}},
	{{+Inf}, {0}},
	{{-2}, {NaN}},
}
var cTrigamma = []testcase{
	{{1e+08}, {1.000000005e-08}},
	{{1e-08}, {1.0000000000000002e+16}},
	{{-1e-08}, {1.0000000000000002e+16}},
	{{10}, {0.10516633568168575}},
	{{-10.2}, {28.473461217287777}},
	{{4.9}, {0.22631146419168002}},
	{{-4.9}, {103.17117695886462}},
}

func TestTrigamma(t *testing.T) {
	name := "Trigamma"
	f := Trigamma
	testall(t, tol, name, [][]testcase{scTrigamma, cTrigamma}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}
func BenchmarkTrigamma(b *testing.B) {
	GlobalF = bench(b, cTrigamma, "",
		func(x []float64) float64 {
			return Trigamma(x[0])
		})
}

var scPolygamma = []testcase{
	{{0, 1e+08}, {18.420680738952367}},
	{{1, 1e+08}, {1.000000005e-08}},
	{{2, NaN}, {NaN}},
	{{2, -Inf}, {NaN}},
	{{2, +Inf}, {0}},
	{{2, -2}, {NaN}},
}
var cPolygamma = []testcase{
	{{2, 1e+08}, {-1.00000001e-16}},
	{{2, 1e-08}, {-2e+24}},
	{{2, 10}, {-0.011049834970802067}},
	{{2, 6}, {-0.0327897322451145}},
	{{2, 7}, {-0.023530472985855238}},
	{{2, 8}, {-0.017699569195767775}},
	{{2, 4.9}, {-0.05100493156907858}},
	{{2, -4.9}, {-1998.6936655466138}},
	{{2, -10.2}, {247.03920499486188}},
	{{3, 1e+08}, {2.0000000300000002e-24}},
	{{3, 1e-08}, {6e+32}},
	{{3, -1e-08}, {6e+32}},
	{{3, 10}, {0.0023199013042898686}},
	{{3, -10.2}, {3768.6142614155146}},
	{{3, 4.9}, {0.022897748562742785}},
	{{3, -4.9}, {60014.239401127015}},
	{{3, -20.2}, {3768.6156617121133}},
	{{3, -110.2}, {3768.6158854609644}},
	{{4, 1e-08}, {-2.4e+41}},
	{{4, -1e-08}, {2.4e+41}},
	{{4, 0.5}, {-771.4742498266672}},
	{{4, -0.5}, {-3.4742498266672253}},
	{{4, -13.9}, {-2.3999738348960066e+06}},
	{{4, -14.01}, {2.3999999999755655e+11}},
	{{4, 14.1}, {-0.00017460126158302312}},
	{{4, 15.9}, {-0.00010630348495697623}},
	{{4, 16}, {-0.00010359125360358783}},
	{{4, -16.01}, {2.3999999999736902e+11}},
	{{4, 17}, {-8.070307000983783e-05}},
	{{5, 1e-08}, {1.2e+50}},
	{{5, -1e-08}, {1.2e+50}},
	{{5, 0.5}, {7691.113548602436}},
	{{5, -0.5}, {15371.113548602436}},
	{{5, 5}, {0.01226150963595438}},
	{{5, 6}, {0.004581509635954379}},
	{{5, 7}, {0.0020094931750490293}},
	{{5, 8}, {0.0009895100047713388}},
	{{5, -5.1}, {1.2000029790471852e+08}},
	{{5, -13.9}, {1.2000029790887256e+08}},
	{{5, 14.1}, {5.123862252375418e-05}},
	{{5, 15.9}, {2.7563111256905805e-05}},
	{{5, 16}, {2.6687171525751197e-05}},
	{{5, 17}, {1.9534614152704322e-05}},
	{{6, 0.001}, {-7.2e+23}},
	{{6, 1}, {-726.0114797149845}},
	{{6, 2}, {-6.011479714984436}},
	{{6, 5}, {-0.013316295488550551}},
	{{6, 10}, {-0.0001601508710767886}},
	{{9, -10.5}, {7.431909047701783e+08}},
	{{9, -100.1}, {3.628800001181459e+15}},
	{{10, 10}, {-5.7675966863222595e-05}},
	{{20, 10}, {-0.0028271335649279823}},
	{{20, 11}, {-0.0003942315567513425}},
	{{20, -20.2}, {1.1600980797653613e+33}},
	{{30, 15}, {-0.00010699799160744993}},
	{{50, 10}, {-3.065245725290585e+13}},
	{{50, -10.5}, {-2.475965723385829e+10}},
	{{100, 0.1}, {-9.332621544394415e+258}},
	{{100, 10}, {-9.333237300479084e+56}},
	{{100, -10.5}, {-6.9122173544603244e+50}},
	{{100, -100.5}, {-3.3121910883047074e-45}},
	{{150, 15}, {-1.4693955875276522e+85}},
	{{200, 50}, {-2.5829713930705358e+33}},
	{{150, -0.001}, {+Inf}},
	{{6, 25}, {-5.532496491858543e-07}},
	{{6, 50}, {-8.151546844438303e-09}},
	{{6, 1000}, {-1.20360419999496e-16}},
	{{7, 1000}, {7.2252335999496e-19}},
	{{8, 1000}, {-5.06019023994456e-21}},
	{{9, 1000}, {4.050174239933472e-23}},
	{{10, 1000}, {-3.646977263913514e-25}},
	{{11, 1000}, {3.6487983166789194e-27}},
	{{11, 100}, {3.8323744698817625e-16}},
	{{111, 1}, {1.7629525510902446e+180}},
}

func TestPolygamma(t *testing.T) {
	name := "Polygamma"
	f := Polygamma
	testall(t, tol, name, [][]testcase{scPolygamma, cPolygamma}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkPolygamma(b *testing.B) {
	GlobalF = bench(b, cPolygamma, "",
		func(x []float64) float64 {
			return Polygamma(int(x[0]), x[1])
		})
}

var scHarmonic = []testcase{
	{{-Inf}, {NaN}},
}
var cHarmonic = []testcase{
	{{0}, {0}},
	{{1}, {1}},
	{{2}, {1.5}},
	{{20}, {3.597739657143682}},
	{{50}, {4.499205338329425}},
}

func TestHarmonic(t *testing.T) {
	name := "Harmonic"
	f := Harmonic
	testall(t, tol, name, [][]testcase{scHarmonic, cHarmonic}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}

var scFibonacci = []testcase{
	{{+Inf}, {+Inf}},
	{{-Inf}, {NaN}},
	{{NaN}, {NaN}},
	{{0}, {0}},
	{{1}, {1}},
}
var cFibonacci = []testcase{
	{{2}, {1}},
	{{-1}, {1}},
	{{-2}, {-1}},
	{{2.5}, {1.4893065462657091}},
	{{-123.321}, {1.4123645428734893e+25}},
	{{-100}, {-3.542248481792619e+20}},
	{{1.618033988749895}, {0.8998442262232443}},
	{{87}, {6.798916376386122e+17}},
}

func TestFibonacci(t *testing.T) {
	name := "Fibonacci"
	f := Fibonacci
	testall(t, tol, name, [][]testcase{scFibonacci, cFibonacci}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0])}
		})
}

var scGammaSign = []testcase{
	{{+Inf}, {1}},
	{{-Inf}, {1}},
	{{NaN}, {1}},
}
var cGammaSign = []testcase{
	{{0.0}, {1}},
	{{1.0}, {1}},
	{{-1.0}, {-1}},
	{{-2.0}, {1}},
}

func TestGammaSign(t *testing.T) {
	name := "GammaSign"
	f := GammaSign
	testall(t, tol, name, [][]testcase{scGammaSign, cGammaSign}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{
				float64(f(x[0]))}
		})
}

func BenchmarkGammaSign(b *testing.B) {
	GlobalF = bench(b, cGammaSign, "",
		func(x []float64) float64 {
			return float64(GammaSign(x[0]))
		})
}

var cGammaRatio = []testcase{
	{{18.3, 17.3}, {17.3}},
	{{18.3, 19.3}, {0.054644808743169398907103825136612021857923497267759562841}},
	{{17.3, 18.3}, {0.057803468208092485549132947976878612716763005780346820809}},
	{{3056.675, 2994.86}, {1.455279029640759935931407996328976678151e+215}},
	{{52, 34}, {178632041505308592071270400000}},
	{{5200, 5170}, {2.7617744500677061199284498641186414738660945163980473e+111}},
	{{-3056.675, -2994.86}, {3.36201570269494877318076138295338657248e-216}},
	{{30.56675, -29.9486}, {6.8925568889573652010911108843213060071431578071870857e+62}},
	{{-30.56675, 29.9486}, {-2.336633827644530886362525262834410927501228572491793e-64}},
	{{-30.56675, 2.99486}, {-8.722212449104196743424739522411319053538568399884817e-34}},
	{{30.56675, -2.99486}, {-1.854447343857626562702508228156158175442536497190872e+30}},
	{{-30.56675, -2.99486}, {5.3197612610626883363834400926838090070275272412206817e-35}},
	{{-3.056675, -2.99486}, {-0.08432044283837548833933209111172014690828397293968886059}},
	{{3.056675, -2.99486}, {-0.06461147512228474627478404097611852893360651779019779098}},
	{{-3.056675, 2.99486}, {1.382507184339208614977034839352802742244932586022841773899}},
	{{-3.056675e-05, -2.99486e-05}, {0.979777394939253166323172227477217052309400947358568028795}},
	{{-3.056675e-05, 2.99486e-05}, {-0.97981126995868406921541291476627784618195757728516169958}},
}

func TestGammaRatio(t *testing.T) {
	name := "GammaRatio"
	f := GammaRatio
	testall(t, tol, name, [][]testcase{cGammaRatio}, []string{""},
		func(x []float64) []float64 {
			return []float64{f(x[:1], x[1:])}
		})
}

var scLgammaRatio = []testcase{
	{{NaN, 0.93}, {NaN, 1}},
	{{1, NaN}, {NaN, 1}},
	{{-100, -100}, {0, 1}},
	{{+Inf, +Inf}, {0, 1}},
	{{-Inf, -Inf}, {0, 1}},
	{{-10, -Inf}, {NaN, 1}},
	{{17.1, +Inf}, {NaN, 1}},
	{{+Inf, 17.1}, {NaN, 1}},
	{{-4, -7}, {5.3471075307174685, -1}},
	{{-100, -150}, {241.2807302938602, 1}},
	{{-3, 102.3}, {+Inf, -1}},
	{{-4, 102.3}, {+Inf, 1}},
	{{102.2132, -19}, {-Inf, -1}},
}
var cLgammaRatio = []testcase{
	{{18.3, 17.3}, {2.8507065015037334, 1}},
	{{18.3, 19.3}, {-2.9069010598473755, 1}},
	{{17.3, 18.3}, {-2.8507065015037334, 1}},
	{{3056.675, 2994.86}, {495.4309926489057, 1}},
	{{52, 34}, {67.35512556691585, 1}},
	{{5200, 5170}, {256.60281871217694, 1}},
	{{-3056.675, -2994.86}, {-496.14583938109644, 1}},
	{{3056.675, -2994.86}, {42451.17912019167, -1}},
	{{-3056.675, 2994.86}, {-42451.89396692386, -1}},
	{{305.6675, -299.486}, {2852.4000840572594, 1}},
	{{30.56675, -29.9486}, {144.69071788326048, 1}},
	{{-30.56675, 29.9486}, {-146.5167345931291, -1}},
	{{-30.56675, 2.99486}, {-76.12202023483091, -1}},
	{{30.56675, -2.99486}, {69.6951395136519, -1}},
	{{-30.56675, -2.99486}, {-78.9190498281851, 1}},
	{{-3.056675, -2.99486}, {-2.473130942324609, -1}},
	{{3.056675, -2.99486}, {-2.739363250496638, -1}},
	{{-3.056675, 2.99486}, {0.32389865102957277, 1}},
	{{-3.056675e-05, -2.99486e-05}, {-0.02042988114070874, 1}},
	{{-3.056675e-05, 2.99486e-05}, {-0.020395307538563508, -1}},
}

func TestLgammaRatio(t *testing.T) {
	name := "LgammaRatio"
	f := LgammaRatio
	testall(t, tol, name, [][]testcase{scLgammaRatio, cLgammaRatio}, []string{"sc", ""},
		func(x []float64) []float64 {
			v, w := f(x[:1], x[1:])
			return []float64{v, float64(w)}
		})
}
func BenchmarkLgammaRatio(b *testing.B) {
	GlobalF = bench(b, cLgammaRatio, "",
		func(x []float64) float64 {
			v, _ := LgammaRatio(x[:1], x[1:])
			return v
		})
}

var scGammaIncU = []testcase{
	{{NaN, 2}, {NaN}},
	{{20, -2.432}, {NaN}},
	{{10, 0}, {362880}},
	{{10, +Inf}, {0}},
}
var cGammaIncU = []testcase{
	{{0, 10}, {4.156968929685325e-06}},
	{{-1, 10}, {3.830240465631609e-07}},
	{{-10, 10}, {2.2146903192202743e-16}},
	{{-10, 27}, {2.420076067270557e-28}},
	{{10, 10}, {166173.53478754574}},
	{{10, 1}, {362879.95956592244}},
	{{-10.2, 1.99}, {9.893689107832149e-06}},
}

func TestGammaIncU(t *testing.T) {
	name := "GammaIncU"
	f := GammaIncU
	testall(t, tol, name, [][]testcase{scGammaIncU, cGammaIncU}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0], x[1])}
		})
}
func BenchmarkGammaIncU(b *testing.B) {
	GlobalF = bench(b, cGammaIncU, "",
		func(x []float64) float64 {
			return GammaIncU(x[0], x[1])
		})
}

var scGammaIncL = []testcase{
	{{NaN, 2}, {NaN}},
	{{-10, NaN}, {NaN}},
	{{20, -2.432}, {NaN}},
	{{10, 0}, {0}},
	{{10, +Inf}, {362880}},
	{{-10, 10}, {+Inf}},
}
var cGammaIncL = []testcase{
	{{10, 100}, {362880}},
	{{10, 1000}, {362880}},
	{{100, 1000}, {9.332621544394415e+155}},
	{{10, 0.001}, {9.990913256294004e-32}},
	{{-11.2, 1.99}, {-4.522214610043099e-06}},
}

func TestGammaIncL(t *testing.T) {
	name := "GammaIncL"
	f := GammaIncL
	testall(t, tol, name, [][]testcase{scGammaIncL, cGammaIncL}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0], x[1])}
		})
}
func BenchmarkGammaIncL(b *testing.B) {
	GlobalF = bench(b, cGammaIncL, "",
		func(x []float64) float64 {
			return GammaIncL(x[0], x[1])
		})
}

var scGammaRegQ = []testcase{
	{{NaN, 2}, {NaN}},
	{{-10, NaN}, {NaN}},
	{{-Inf, 456789}, {NaN}},
	{{20, -2.432}, {NaN}},
	{{10, 0}, {1}},
	{{10, +Inf}, {0}},
	{{+Inf, +Inf}, {0.5}},
	{{+Inf, 456789}, {1}},
	{{0, 10}, {0}},
	{{-10, 4.3}, {0}},
}
var cGammaRegQ = []testcase{
	{{1, 1}, {0.36787944117144233}},
	{{9.99, 20}, {0.004954569877748838}},
	{{9.99, 200}, {1.982646310671054e-72}},
	{{0.999, 200}, {1.3757812606842123e-87}},
	{{420.1, 720.2}, {2.79020552935468e-34}},
	{{1000, 1300}, {1.8736155715785553e-18}},
	{{1000, 1600}, {7.313139074297604e-59}},
	{{10000, 10600}, {1.962192482133047e-09}},
	{{10000, 13600}, {9.399356444057407e-231}},
	{{1e-05, 1e-06}, {0.00013237427892869393}},
	{{100000, 1e-05}, {1}},
	//	{{1e-10, 1e-05}, {1.0935719794146443e-09}},
	{{1e-05, 1e-10}, {0.00022446123970332708}},
	{{-10.2, 1.99}, {-10.771647985412187}},
	{{-9.2, 1.99}, {2.2833353843893005}},
	{{-19.2, 1.99}, {4.844760972100303e+08}},
	{{-19.2, 0.00199}, {1.5611033767832837e+67}},
	{{-9.9999, 1e-30}, {3.603008059493326e+301}},
	{{-9.99, 1e-30}, {1.7779299225269738e+303}},
}

func TestGammaRegQ(t *testing.T) {
	name := "GammaRegQ"
	f := GammaRegQ
	testall(t, tol, name, [][]testcase{scGammaRegQ, cGammaRegQ}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0], x[1])}
		})
}
func BenchmarkGammaRegQ(b *testing.B) {
	GlobalF = bench(b, cGammaRegQ, "",
		func(x []float64) float64 {
			return GammaRegQ(x[0], x[1])
		})
}

var scGammaRegP = []testcase{
	{{NaN, 2}, {NaN}},
	{{-10, NaN}, {NaN}},
	{{-Inf, 456789}, {NaN}},
	{{20, -2.432}, {NaN}},
	{{10, 0}, {0}},
	{{10, +Inf}, {1}},
	{{+Inf, +Inf}, {0.5}},
	{{+Inf, 456789}, {0}},
	{{0, 10}, {1}},
}
var cGammaRegP = []testcase{
	{{1, 1}, {0.6321205588285577}},
	{{1, 10}, {0.9999546000702375}},
	{{1, 50}, {1}},
	{{10, 100}, {1}},
	{{10, 150}, {1}},
	{{50, 500}, {1}},
	{{10, 250}, {1}},
	{{100, 165}, {0.9999999804505769}},
	{{250, 500}, {1}},
	{{300, 101}, {1.3305749570362612e-57}},
	{{300, 0.001}, {0}},
	{{360, 20}, {1.2865568842040574e-306}},
	{{360, 360}, {0.5070088089381088}},
	{{150.5, 1.943e+07}, {1}},
	{{475, 500}, {0.8734349764734631}},
	{{4975, 5000}, {0.6400425596444944}},
	{{-0.5, 1}, {1.0502545416600122}},
	{{-15.5, 2}, {-273823.65628021094}},
	{{420, 700}, {1}},
	{{9.99, 20}, {0.9950454301222512}},
	{{9.99, 200}, {1}},
	{{0.999, 200}, {1}},
	{{1000, 1300}, {1}},
	{{1000, 1600}, {1}},
	{{10000, 10600}, {0.9999999980378075}},
	{{10000, 13600}, {1}},
	{{1e-05, 1e-06}, {0.9998676257210714}},
	{{100000, 1e-05}, {0}},
	{{1e-10, 1e-05}, {0.999999998906428}},
	{{1e-05, 1e-10}, {0.9997755387602967}},
	{{-11.2, 1.99}, {-55.14334215125875}},
	{{-9.2, 1.99}, {-1.28333538438931}},
	{{-19.2, 1.99}, {-4.844760962100325e+08}},
	{{-19.2, 0.00199}, {-1.561103376783299e+67}},
}

func TestGammaRegP(t *testing.T) {
	name := "GammaRegP"
	f := GammaRegP
	testall(t, tol, name, [][]testcase{scGammaRegP, cGammaRegP}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0], x[1])}
		})
}
func BenchmarkGammaRegP(b *testing.B) {
	GlobalF = bench(b, cGammaRegP, "",
		func(x []float64) float64 {
			return GammaRegP(x[0], x[1])
		})
}

var scGammaIncIdentity = []testcase{
	{{NaN, 2}, {NaN}},
	{{-10, NaN}, {NaN}},
	{{20, -2.432}, {NaN}},
	{{+Inf, 12.2}, {NaN}},
	{{10, +Inf}, {362880}},
}
var cGammaIncIdentity = []testcase{
	{{10, 43}, {362880}},
	{{50.5, 94.3}, {4.290462912351957e+63}},
	{{150.5, 94.3}, {4.661072627097374e+261}},
	{{150.5, 194.3}, {4.661072627097374e+261}},
	{{150.5, 1.943e+07}, {4.661072627097374e+261}},
}

func TestGammaIncIdentity(t *testing.T) {
	name := "IncGammaIdentity"
	f := func(a, x float64) float64 {
		return GammaIncU(a, x) + GammaIncL(a, x)
	}
	testall(t, tol, name, [][]testcase{scGammaIncIdentity, cGammaIncIdentity}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0], x[1])}
		})
}

var scLambertW = []testcase{
	{{2, 2.2}, {NaN}},
	{{0, 0}, {0}},
	{{0, -3}, {NaN}},
	{{0, +Inf}, {+Inf}},
	{{-1, 0}, {-Inf}},
	{{-1, -3}, {NaN}},
	{{-1, 3}, {NaN}},
}
var cLambertW = []testcase{
	{{0, -0.33}, {-0.6032666497551331}},
	{{0, 0.1}, {0.09127652716086226}},
	{{0, 4.5}, {1.2672378143074348}},
	{{0, 9.9}, {1.7391425517333516}},
	{{0, 10.89}, {1.8000374607381258}},
	{{0, 100.12}, {3.386555992882349}},
	{{-1, -0.36787944117144233}, {-1}},
	{{-1, -0.33}, {-1.541268224332639}},
	{{-1, -0.1}, {-3.577152063957297}},
}

func TestLambertw(t *testing.T) {
	name := "LambertW"
	f := LambertW
	testall(t, tol, name, [][]testcase{scLambertW, cLambertW}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(int(x[0]), x[1])}
		})
}
func BenchmarkLambertW(b *testing.B) {
	GlobalF = bench(b, cLambertW, "",
		func(x []float64) float64 {
			return LambertW(int(x[0]), x[1])
		})
}

var scPoch = []testcase{
	{{NaN, 45.456789}, {NaN}},
	{{45.456789, NaN}, {NaN}},
	{{45.456789, 0}, {1}},
	{{45.456789, 1}, {45.456789}},
	{{1, -1}, {+Inf}},
	{{-7, +Inf}, {0}},
	{{-6.99, +Inf}, {-Inf}},
	{{45.456789, +Inf}, {+Inf}},
	{{45.456789, -Inf}, {NaN}},
	{{+Inf, 45.456789}, {+Inf}},
	{{-Inf, 45.456789}, {0}},
	{{+Inf, +Inf}, {+Inf}},
	{{3, -11}, {+Inf}},
	{{3, -10}, {-Inf}},
	{{-1.25, -2.75}, {+Inf}},
	{{1.25, -2.25}, {-Inf}},
	{{-0.1, -0.9}, {+Inf}},
}
var cPoch = []testcase{
	{{0, -5}, {-0.008333333333333333}},
	{{0, -4.9}, {0}},
	{{-5, 5}, {-120}},
	{{2, 5}, {720}},
	{{-3, 8}, {0}},
	{{-11, 45.456789}, {0}},
	{{8, -3}, {0.004761904761904762}},
	{{-10, 4}, {5040}},
	{{-5, -10}, {9.17659647818378e-11}},
	{{1.25, 2.75}, {6.619575907925023}},
	{{-17.5, 180.5}, {5.86592464809013e+303}},
	{{6, 45.456789}, {1.5234777676342018e+63}},
	{{140, -190.1}, {-2.348215044179754e-303}},
	{{-3.141592653589793, 1.5707963267948966}, {2.266906744884818}},
	{{3.141592653589793, 3.141592653589793}, {85.63499961560903}},
	{{200.1, -0.1}, {0.5888365802348768}},
	{{200, -0.1}, {0.5888660965321199}},
	{{-205.1, 131.9}, {2.305030399715578e+280}},
	{{-0.1, 0.2}, {-0.8902538065654994}},
	{{-1e-50, 190}, {-5.0949066711869736e+299}},
}

func TestPoch(t *testing.T) {
	name := "Poch"
	f := Poch
	testall(t, tol, name, [][]testcase{scPoch, cPoch}, []string{"sc", ""},
		func(x []float64) []float64 {
			return []float64{f(x[0], x[1])}
		})
}
